import { useRef, useState, useMemo } from "react";
import { FileUpload } from "../../features/FileUpload/FileUpload";
import { MapPreview } from "../../widgets/MapPreview/MapPreview";
import { FeatureTable } from "../../widgets/FeatureTable/FeatureTable";
import { AddFeatureModal } from "../../features/DataAdding/AddFeatureModal";
import "./ImportPage.css";

export const ImportPage = () => {
  const [parsedData, setParsedData] = useState<any | null>(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [addMode, setAddMode] = useState(false);
  const inputRef = useRef<HTMLInputElement>(null!);

  const geometryTypes = useMemo(() => {
    const types = new Set<string>();
    parsedData?.features?.forEach((f: any) => {
      if (f.geometry?.type) types.add(f.geometry.type);
    });
    return Array.from(types);
  }, [parsedData]);

  const handleFileParsed = (data: any) => {
    try {
      if (!data || !data.features || !Array.isArray(data.features)) {
        throw new Error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –û–∂–∏–¥–∞–ª—Å—è GeoJSON.");
      }
      console.log("üì• –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ ImportPage:", data);
      setParsedData(data);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ ImportPage:", error);
    }
  };

  const handleClearMap = () => {
    console.log("üóë –û—á–∏—â–∞–µ–º –∫–∞—Ä—Ç—É –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...");
    setParsedData(null);
    if (inputRef.current) {
      inputRef.current.value = "";
    }
  };

  const handleAddPoint = () => {
    setAddMode(true);       // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    setModalOpen(false);    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
  };

  const handleAddFeatureOnMapClick = (lonLat: [number, number]) => {
    const newId = (parsedData?.features.length ?? 0) + 1;

    const newFeature = {
      type: "Feature",
      geometry: {
        type: "Point",
        coordinates: lonLat,
      },
      properties: {
        id: newId,
        name: `New Point ${newId}`,
      },
    };

    const updated = {
      ...parsedData,
      features: [...(parsedData?.features || []), newFeature],
    };

    setParsedData(updated);
    setAddMode(false); // –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–∫–∞
  };

  return (
    <div className="import-container">
      {/* –®–∞–ø–∫–∞ */}
      <div className="import-header">
        <h1 className="import-title">–ò–º–ø–æ—Ä—Ç</h1>
        <div className="import-buttons">
          <FileUpload onFileParsed={handleFileParsed} inputRef={inputRef} />

          <button
            className="add-button"
            onClick={() => setModalOpen(true)}
            disabled={!parsedData}
          >
            ‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç
          </button>

          <button className="clear-button" onClick={handleClearMap}>
            üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–∞—Ä—Ç—É
          </button>
        </div>
      </div>

      {/* –ö–∞—Ä—Ç–∞ */}
      <div className="map-container">
        <MapPreview
          geojsonData={parsedData || { type: "FeatureCollection", features: [] }}
          addMode={addMode}
          onAddFeature={handleAddFeatureOnMapClick}
        />
      </div>

      {/* –¢–∞–±–ª–∏—Ü–∞ */}
      <div className="table-wrapper">
        <h2 className="table-title">–¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö</h2>
        <FeatureTable geojsonData={parsedData} onUpdate={setParsedData} />
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ */}
      <AddFeatureModal
        isOpen={modalOpen}
        onClose={() => setModalOpen(false)}
        types={geometryTypes}
        onAddPoint={handleAddPoint}
      />
    </div>
  );
};