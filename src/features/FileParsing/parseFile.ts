import { parseCSV } from "./parseCSV";
import { parseGeoJSON } from "./parseGeoJSON";
import { parseShapefile } from "./parseShapefile";

const getFileExtension = (filename: string) => filename.split(".").pop()?.toLowerCase();

export const parseFile = async (file: File) => {
  const ext = getFileExtension(file.name);
  console.log(`üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: ${file.name}, —Ñ–æ—Ä–º–∞—Ç: ${ext}`);

  switch (ext) {
    case "csv":
      console.log("‚û°Ô∏è –í—ã–±—Ä–∞–Ω CSV –ø–∞—Ä—Å–µ—Ä");
      return parseCSV(file);
    case "geojson":
      console.log("‚û°Ô∏è –í—ã–±—Ä–∞–Ω GeoJSON –ø–∞—Ä—Å–µ—Ä");
      return parseGeoJSON(file);
    case "zip": // ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ZIP
      console.log("‚û°Ô∏è –í—ã–±—Ä–∞–Ω Shapefile –ø–∞—Ä—Å–µ—Ä (ZIP)");
      return parseShapefile(file);
    default:
      console.error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!");
      return Promise.reject(new Error("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞"));
  }
};