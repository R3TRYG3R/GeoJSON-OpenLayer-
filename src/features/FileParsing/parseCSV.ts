import Papa from "papaparse";

interface CSVRow {
  latitude: number;
  longitude: number;
  [key: string]: any;
}

export const parseCSV = async (file: File) => {
  console.log("üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º CSV —Ñ–∞–π–ª:", file.name);

  return new Promise((resolve, reject) => {
    Papa.parse(file, {
      header: true,
      dynamicTyping: true,
      delimiter: ",", // ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
      skipEmptyLines: true, // ‚úÖ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      encoding: "utf-8", // ‚úÖ –£–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
      complete: (result) => {
        console.log("üîç CSV –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç:", result);

        if (result.errors.length) {
          console.error("‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ CSV:", result.errors);
          reject(result.errors);
          return;
        }

        const data = result.data as CSVRow[];
        console.log("‚úÖ CSV —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:", data);

        if (!data[0]?.latitude || !data[0]?.longitude) {
          console.error("‚ùå –û—à–∏–±–∫–∞: –í CSV –Ω–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ `latitude` –∏ `longitude`!");
          reject(new Error("CSV –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ `latitude` –∏ `longitude`"));
          return;
        }

        const geojson = {
          type: "FeatureCollection",
          features: data.map((row) => ({
            type: "Feature",
            geometry: {
              type: "Point",
              coordinates: [row.longitude, row.latitude],
            },
            properties: row,
          })),
        };

        console.log("üåç –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π GeoJSON:", geojson);
        resolve(geojson);
      },
      error: (error) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV:", error);
        reject(error);
      },
    });
  });
};