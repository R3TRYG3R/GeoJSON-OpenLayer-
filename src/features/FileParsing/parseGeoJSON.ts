export const parseGeoJSON = async (file: File) => {
  try {
    console.log("üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º GeoJSON —Ñ–∞–π–ª:", file.name);

    const text = await file.text();
    if (!text) throw new Error("‚ùå –§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω.");

    const json = JSON.parse(text);

    if (!json || json.type !== "FeatureCollection" || !json.features) {
      throw new Error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç GeoJSON. –û–∂–∏–¥–∞–ª—Å—è `FeatureCollection`.");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º `properties`
    json.features = json.features.map((feature: any, index: number) => ({
      ...feature,
      properties: feature.properties && Object.keys(feature.properties).length > 0
        ? feature.properties // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö
        : { id: index + 1, geometryType: feature.geometry.type }, // –ï—Å–ª–∏ `properties` –ø—É—Å—Ç, —Å–æ–∑–¥–∞—ë–º
    }));

    console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω GeoJSON:", json);
    return json;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ GeoJSON:", error);
    return null;
  }
};