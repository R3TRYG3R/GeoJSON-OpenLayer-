import React, { JSX, useEffect, useState } from "react";
import { useSelectedFeature } from "../../context/SelectedFeatureContext";
import "./FeatureTable.css";

interface FeatureTableProps {
  geojsonData: any;
}

export const FeatureTable: React.FC<FeatureTableProps> = ({ geojsonData }) => {
  const { selectedFeature } = useSelectedFeature();
  const [selectedId, setSelectedId] = useState<string | number | null>(null);

  // –û–±–Ω–æ–≤–ª—è–µ–º ID –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ
  useEffect(() => {
    if (selectedFeature) {
      let featureId = selectedFeature.getId();

      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ID
      const normalizedId =
        featureId !== undefined
          ? typeof featureId === "string"
            ? parseInt(featureId.replace(/\D/g, ""), 10) || featureId
            : featureId
          : null; // –ï—Å–ª–∏ featureId = undefined, —Å—Ç–∞–≤–∏–º null

      console.log("üü¢ –í—ã–±—Ä–∞–Ω –æ–±—ä–µ–∫—Ç —Å ID:", normalizedId);
      setSelectedId(normalizedId);
    } else {
      console.log("‚ö™ –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞");
      setSelectedId(null);
    }
  }, [selectedFeature]);

  if (!geojsonData || !geojsonData.features?.length) {
    return <p className="no-data">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</p>;
  }

  return (
    <div className="table-container">
      <table className="feature-table">
        <thead>
          <tr>
            <th>ID</th>
            <th>–¢–∏–ø –≥–µ–æ–º–µ—Ç—Ä–∏–∏</th>
            <th>–°–≤–æ–π—Å—Ç–≤–∞</th>
            <th>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</th>
          </tr>
        </thead>
        <tbody>
          {geojsonData.features.map((feature: any, index: number) => {
            const geometry = feature.geometry;
            const properties = feature.properties;
            let coordinates: string | JSX.Element = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö";
            let geometryType = geometry?.type || "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ";

            if (geometry) {
              try {
                if (geometry.type === "Point") {
                  const [lon, lat] = geometry.coordinates;
                  coordinates = `üìç ${lat}, ${lon}`;
                } else if (geometry.type === "LineString") {
                  coordinates = (
                    <ul>
                      {geometry.coordinates.map((coord: number[], i: number) => {
                        const [lon, lat] = coord;
                        return <li key={i}>{`üìç ${lat}, ${lon}`}</li>;
                      })}
                    </ul>
                  );
                } else if (geometry.type === "Polygon") {
                  coordinates = (
                    <ul>
                      {geometry.coordinates[0]?.map((coord: number[], i: number) => {
                        const [lon, lat] = coord;
                        return <li key={i}>{`üìç ${lat}, ${lon}`}</li>;
                      })}
                    </ul>
                  );
                }
              } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:", error);
                coordinates = "‚ö†Ô∏è –û—à–∏–±–∫–∞";
              }
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ–±—ä–µ–∫—Ç–∞
            let featureId = feature.id ?? properties.id ?? index + 1;

            // –ü—Ä–∏–≤–æ–¥–∏–º ID –∫ —Ç–∞–∫–æ–º—É –∂–µ —Ñ–æ—Ä–º–∞—Ç—É, –∫–∞–∫ –≤ `selectedFeature`
            const normalizedFeatureId =
              featureId !== undefined
                ? typeof featureId === "string"
                  ? parseInt(featureId.replace(/\D/g, ""), 10) || featureId
                  : featureId
                : null; // üõ† –ï—Å–ª–∏ featureId = undefined, —Å—Ç–∞–≤–∏–º null

            const isSelected = selectedId === normalizedFeatureId;

            console.log(
              `üîç –û–±—ä–µ–∫—Ç ID: ${normalizedFeatureId} | –í—ã–±—Ä–∞–Ω? ${isSelected ? "‚úÖ –î–∞" : "‚ùå –ù–µ—Ç"}`
            );

            return (
              <tr key={index} className={isSelected ? "selected" : ""}>
                <td>{normalizedFeatureId}</td>
                <td>{geometryType}</td>
                <td>
                  <ul>
                    {Object.entries(properties)
                      .filter(([key]) => key !== "geometryType")
                      .map(([key, value]) => (
                        <li key={key}>
                          <b>{key}:</b> {String(value)}
                        </li>
                      ))}
                  </ul>
                </td>
                <td>{coordinates}</td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  );
};