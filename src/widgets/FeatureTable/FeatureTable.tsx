import React, { JSX } from "react";
import { useSelectedFeature } from "../../context/SelectedFeatureContext";

interface FeatureTableProps {
  geojsonData: any;
}

export const FeatureTable: React.FC<FeatureTableProps> = ({ geojsonData }) => {
  const { selectedFeature } = useSelectedFeature();

  // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
  if (!geojsonData || !geojsonData.features?.length) {
    return <p className="text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</p>;
  }

  return (
    <div className="overflow-x-auto mt-4 border rounded-lg">
      <table className="min-w-full border-collapse border border-gray-300">
        <thead>
          <tr className="bg-gray-100">
            <th className="border px-4 py-2">ID</th>
            <th className="border px-4 py-2">–¢–∏–ø –≥–µ–æ–º–µ—Ç—Ä–∏–∏</th>
            <th className="border px-4 py-2">–°–≤–æ–π—Å—Ç–≤–∞</th>
            <th className="border px-4 py-2">–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</th>
          </tr>
        </thead>
        <tbody>
          {geojsonData.features.map((feature: any, index: number) => {
            const geometry = feature.geometry;
            const properties = feature.properties;
            let coordinates: string | JSX.Element = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö";
            let geometryType = geometry?.type || "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ";

            // ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ GeoJSON
            const isGeoJSON = geojsonData.type === "FeatureCollection";

            if (geometry && isGeoJSON) {
              try {
                if (geometry.type === "Point") {
                  // ‚úÖ –¢–æ—á–∫–∞ (—à–∏—Ä–æ—Ç–∞ –∏ –¥–æ–ª–≥–æ—Ç–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç)
                  const [lon, lat] = geometry.coordinates;
                  coordinates = `üìç ${lat}, ${lon}`;
                } else if (geometry.type === "LineString") {
                  coordinates = (
                    <ul>
                      {geometry.coordinates.map((coord: number[], i: number) => {
                        const [lon, lat] = coord;
                        return <li key={i}>{`üìç ${lat}, ${lon}`}</li>;
                      })}
                    </ul>
                  );
                } else if (geometry.type === "Polygon") {
                  coordinates = (
                    <ul>
                      {geometry.coordinates[0]?.map((coord: number[], i: number) => {
                        const [lon, lat] = coord;
                        return <li key={i}>{`üìç ${lat}, ${lon}`}</li>;
                      })}
                    </ul>
                  );
                }
              } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:", error);
                coordinates = "‚ö†Ô∏è –û—à–∏–±–∫–∞";
              }
            }

            return (
              <tr key={index} className="cursor-pointer hover:bg-gray-100">
                <td className="border px-4 py-2">{index + 1}</td>
                <td className="border px-4 py-2">{geometryType}</td>
                <td className="border px-4 py-2">
                  <ul>
                    {Object.entries(properties)
                      .filter(([key]) => key !== "geometryType")
                      .map(([key, value]) => (
                        <li key={key}>
                          <b>{key}:</b> {String(value)}
                        </li>
                      ))}
                  </ul>
                </td>
                <td className="border px-4 py-2">{coordinates}</td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  );
};