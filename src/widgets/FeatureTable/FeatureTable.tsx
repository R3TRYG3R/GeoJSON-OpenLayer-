import React, { useEffect, useState, useRef } from "react";
import { useSelectedFeature } from "../../context/SelectedFeatureContext";
import { Feature } from "ol";
import { Geometry } from "ol/geom";
import GeoJSON from "ol/format/GeoJSON";
import "./FeatureTable.css";

interface FeatureTableProps {
  geojsonData: any;
}

export const FeatureTable: React.FC<FeatureTableProps> = ({ geojsonData }) => {
  const { selectedFeature, setSelectedFeature } = useSelectedFeature();
  const [selectedId, setSelectedId] = useState<string | number | null>(null);
  const [columns, setColumns] = useState<string[]>([]);
  const [isGeoJSON, setIsGeoJSON] = useState<boolean>(false);
  const rowRefs = useRef<Map<string | number, HTMLTableRowElement | null>>(new Map());

  // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º ID –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ
  useEffect(() => {
    if (selectedFeature) {
      let featureId = selectedFeature.getId();
      console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –æ–±—ä–µ–∫—Ç–∞:", featureId);

      // üõ† –ü—Ä–æ–≤–µ—Ä–∫–∞ ID –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
      const normalizedId =
        featureId !== undefined && featureId !== null
          ? typeof featureId === "string"
            ? parseInt(featureId.replace(/\D/g, ""), 10) || featureId
            : featureId
          : null;

      console.log("üü¢ –í—ã–±—Ä–∞–Ω –æ–±—ä–µ–∫—Ç —Å ID:", normalizedId);
      setSelectedId(normalizedId);

      // üîÑ –ê–≤—Ç–æ-—Å–∫—Ä–æ–ª–ª –∫ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É
      if (normalizedId !== null && rowRefs.current.has(normalizedId)) {
        rowRefs.current.get(normalizedId)?.scrollIntoView({
          behavior: "smooth",
          block: "center",
        });
      }
    } else {
      console.log("‚ö™ –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞");
      setSelectedId(null);
    }
  }, [selectedFeature]);

  // üîÑ –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏
  useEffect(() => {
    if (!geojsonData || !geojsonData.features?.length) {
      setColumns([]);
      setIsGeoJSON(false);
      return;
    }

    let dynamicColumns: string[] = [];
    const firstFeature = geojsonData.features[0];

    // ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª GeoJSON
    const isGeoJSONFormat =
      firstFeature.geometry && firstFeature.geometry.coordinates;

    setIsGeoJSON(!!isGeoJSONFormat);

    // ‚úÖ –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ properties (–¥–ª—è CSV –∏ Shapefile)
    if (firstFeature.properties && Object.keys(firstFeature.properties).length > 0) {
      dynamicColumns = Object.keys(firstFeature.properties);
    }

    // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º id, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ properties
    if (!dynamicColumns.includes("id")) {
      dynamicColumns.unshift("id");
    }

    if (isGeoJSONFormat) {
      dynamicColumns.push("coordinates");
    }

    setColumns(dynamicColumns);
  }, [geojsonData]);

  // üîπ –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–µ (–≤—ã–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ)
  const handleRowClick = (featureData: any) => {
    console.log("üîµ –í—ã–±—Ä–∞–Ω –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ —Ç–∞–±–ª–∏—Ü—É:", featureData);

    let featureToSelect: Feature<Geometry> | null = null;

    if (featureData instanceof Feature) {
      // ‚úÖ –£–∂–µ OpenLayers Feature
      featureToSelect = featureData;
    } else {
      // ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Feature –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ —ç—Ç–æ GeoJSON
      try {
        const geojsonFormat = new GeoJSON();
        const convertedFeature = geojsonFormat.readFeature(featureData, {
          featureProjection: "EPSG:3857",
        });

        if (convertedFeature instanceof Feature) {
          // üõ† –ù–∞–∑–Ω–∞—á–∞–µ–º ID, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
          if (!convertedFeature.getId()) {
            const newId = featureData.properties?.id ?? Math.random();
            convertedFeature.setId(newId);
            console.log("‚ö° –ù–∞–∑–Ω–∞—á–µ–Ω ID –æ–±—ä–µ–∫—Ç—É:", newId);
          }

          featureToSelect = convertedFeature;
          console.log("‚úÖ –û–±—ä–µ–∫—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ OpenLayers Feature:", featureToSelect);
        } else {
          console.warn("‚ö†Ô∏è readFeature –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç:", convertedFeature);
        }
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞ –≤ Feature:", error);
      }
    }

    if (featureToSelect) {
      console.log("üî¥ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç:", featureToSelect);
      setSelectedFeature(featureToSelect);
    } else {
      console.warn("‚ö†Ô∏è –í—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ Feature");
    }
  };

  if (!geojsonData || !geojsonData.features?.length) {
    return <p className="no-data">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</p>;
  }

  return (
    <div className="table-container">
      <table className="feature-table">
        <thead>
          <tr>
            {columns.map((col) => (
              <th key={col}>{col}</th>
            ))}
          </tr>
        </thead>
        <tbody>
          {geojsonData.features.map((feature: any, index: number) => {
            const isSelected = selectedId === feature.properties?.id;
            const featureId = feature.properties?.id ?? index + 1;

            return (
              <tr
                key={index}
                ref={(el) => {
                  if (el) {
                    rowRefs.current.set(featureId, el);
                  }
                }}
                className={isSelected ? "selected" : ""}
                onClick={() => handleRowClick(feature)}
              >
                {columns.map((col) => (
                  <td key={col}>
                    {col === "id"
                      ? featureId
                      : col === "coordinates" && isGeoJSON
                      ? JSON.stringify(feature.geometry.coordinates)
                      : feature.properties?.[col] ?? ""}
                  </td>
                ))}
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  );
};