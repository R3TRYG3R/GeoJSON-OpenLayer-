import { useEffect, useRef, useState } from "react";
import Map from "ol/Map";
import View from "ol/View";
import TileLayer from "ol/layer/Tile";
import VectorLayer from "ol/layer/Vector";
import VectorSource from "ol/source/Vector";
import GeoJSON from "ol/format/GeoJSON";
import OSM from "ol/source/OSM";
import { fromLonLat } from "ol/proj";

export const MapPreview = ({ geojsonData }: { geojsonData: any }) => {
  const mapRef = useRef<HTMLDivElement>(null);
  const mapInstance = useRef<Map | null>(null);
  const vectorLayerRef = useRef<VectorLayer | null>(null);
  const [isMapReady, setIsMapReady] = useState(false);

  const AZERBAIJAN_CENTER = [47.5769, 40.1431];
  const AZERBAIJAN_ZOOM = 7.5;
  const MIN_ZOOM = 7.5; // üîπ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑—É–º –ø–µ—Ä–µ–¥ —Å–º–µ–Ω–æ–π —Ñ–∞–π–ª–∞
  const MAX_ZOOM = 18; // üîπ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ

  useEffect(() => {
    if (!mapRef.current) {
      console.error("‚ùå `mapRef.current` –Ω–µ –Ω–∞–π–¥–µ–Ω, –∫–∞—Ä—Ç–∞ –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞!");
      return;
    }

    console.log("üìå `mapRef.current` –Ω–∞–π–¥–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É...");

    mapInstance.current = new Map({
      target: mapRef.current!,
      layers: [
        new TileLayer({
          source: new OSM(),
        }),
      ],
      view: new View({
        center: fromLonLat(AZERBAIJAN_CENTER),
        zoom: AZERBAIJAN_ZOOM,
      }),
    });

    setTimeout(() => {
      console.log("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç—ã...");
      mapInstance.current?.updateSize();
    }, 500);

    setIsMapReady(true);

    return () => {
      mapInstance.current?.setTarget(undefined);
    };
  }, []);

  useEffect(() => {
    if (!isMapReady || !mapInstance.current) return;

    if (!geojsonData || !geojsonData.features?.length) {
      console.log("üóë –û—á–∏—â–∞–µ–º –∫–∞—Ä—Ç—É, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω...");
      if (vectorLayerRef.current) {
        mapInstance.current.removeLayer(vectorLayerRef.current);
        vectorLayerRef.current = null;
      }
      mapInstance.current?.getView()?.animate({
        center: fromLonLat(AZERBAIJAN_CENTER),
        zoom: AZERBAIJAN_ZOOM,
        duration: 800,
      });
      return;
    }

    console.log("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–∞—Ä—Ç—É...", geojsonData);

    try {
      const vectorSource = new VectorSource({
        features: new GeoJSON().readFeatures(geojsonData, {
          featureProjection: "EPSG:3857",
        }),
      });

      const vectorLayer = new VectorLayer({
        source: vectorSource,
      });

      if (vectorLayerRef.current) {
        mapInstance.current.removeLayer(vectorLayerRef.current);
        console.log("üóë –£–¥–∞–ª—ë–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–æ–π —Å –ø–æ–ª–∏–≥–æ–Ω–∞–º–∏");
      }

      mapInstance.current.addLayer(vectorLayer);
      vectorLayerRef.current = vectorLayer;

      const extent = vectorSource.getExtent();
      if (extent && extent[0] !== Infinity) {
        console.log("üîÑ –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å–º–µ–Ω—ã —Ñ–∞–π–ª–∞...");

        // 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ `mapInstance.current` —Ç–æ—á–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!mapInstance.current) return;

        // 2Ô∏è‚É£ –£–º–µ–Ω—å—à–∞–µ–º –∫–∞—Ä—Ç—É –ø–µ—Ä–µ–¥ —Å–º–µ–Ω–æ–π —Ñ–∞–π–ª–∞
        mapInstance.current.getView()?.animate({ zoom: MIN_ZOOM, duration: 800 });

        // 3Ô∏è‚É£ –ü–æ—Å–ª–µ —É–º–µ–Ω—å—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ 900ms ‚Üí –ø—Ä–∏–±–ª–∏–∂–∞–µ–º –∫ –Ω–æ–≤–æ–º—É —Ñ–∞–π–ª—É
        setTimeout(() => {
          if (!mapInstance.current) return; // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∑—É–º–∞

          mapInstance.current.getView()?.fit(extent, {
            padding: [10, 10, 10, 10],
            maxZoom: MAX_ZOOM,
            duration: 1000, // –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è
          });

          console.log("‚úÖ –ö–∞—Ä—Ç–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∞ –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º");
        }, 900);
      } else {
        console.warn("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É: –ø—É—Å—Ç–æ–π `extent`.");
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ GeoJSON:", error);
    }
  }, [geojsonData, isMapReady]);

  return (
    <div
      ref={mapRef}
      className="w-full h-96 border border-gray-600 rounded-lg"
      style={{ backgroundColor: "lightgray", height: "100%", width: "100%" }}
    />
  );
};