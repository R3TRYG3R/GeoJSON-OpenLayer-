import { useEffect, useRef } from "react";
import VectorLayer from "ol/layer/Vector";
import Vector from "ol/source/Vector";
import GeoJSON from "ol/format/GeoJSON";
import { fromLonLat } from "ol/proj";
import { AZERBAIJAN_CENTER, AZERBAIJAN_ZOOM, useMap } from "../../context/MapContext";
import { useSelectedFeature } from "../../context/SelectedFeatureContext";
import Feature from "ol/Feature";
import { Geometry } from "ol/geom";
import { Style, Fill, Stroke, Circle as CircleStyle } from "ol/style";

interface MapPreviewProps {
  geojsonData: any;
}

export const MapPreview: React.FC<MapPreviewProps> = ({ geojsonData }) => {
  const { mapRef, isMapReady, mapInstance } = useMap();
  const { selectedFeature, setSelectedFeature } = useSelectedFeature();
  const vectorLayerRef = useRef<VectorLayer | null>(null);
  const vectorSourceRef = useRef<Vector | null>(null);

  useEffect(() => {
    if (!isMapReady || !mapInstance.current) return;

    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äì –æ—á–∏—â–∞–µ–º –∫–∞—Ä—Ç—É –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞–º–µ—Ä—É
    if (!geojsonData || !geojsonData.features?.length) {
      console.log("üóë –û—á–∏—â–∞–µ–º –∫–∞—Ä—Ç—É, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω...");
      if (vectorLayerRef.current) {
        mapInstance.current.removeLayer(vectorLayerRef.current);
        vectorLayerRef.current = null;
      }
      mapInstance.current?.getView()?.animate({
        center: fromLonLat(AZERBAIJAN_CENTER),
        zoom: AZERBAIJAN_ZOOM,
        duration: 800,
      });
      return;
    }

    console.log("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–∞—Ä—Ç—É...", geojsonData);

    try {
      // ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º ID, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      const features = new GeoJSON().readFeatures(geojsonData, {
        featureProjection: "EPSG:3857",
      });

      features.forEach((feature, index) => {
        if (!feature.getId()) {
          feature.setId(index + 1); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        }
      });

      const vectorSource = new Vector({ features });

      // ‚úÖ –°—Ç–∏–ª–∏
      const defaultStyle = new Style({
        stroke: new Stroke({ color: "blue", width: 2 }),
        fill: new Fill({ color: "rgba(0, 0, 255, 0.3)" }),
        image: new CircleStyle({ radius: 6, fill: new Fill({ color: "blue" }) }),
      });

      const selectedStyle = new Style({
        stroke: new Stroke({ color: "red", width: 3 }),
        fill: new Fill({ color: "rgba(255, 0, 0, 0.3)" }),
        image: new CircleStyle({ radius: 6, fill: new Fill({ color: "red" }) }),
      });

      const vectorLayer = new VectorLayer({
        source: vectorSource,
        style: (feature) =>
          selectedFeature && feature.getId() === selectedFeature.getId() ? selectedStyle : defaultStyle,
      });

      if (vectorLayerRef.current) {
        mapInstance.current.removeLayer(vectorLayerRef.current);
        console.log("üóë –£–¥–∞–ª—ë–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–æ–π —Å –ø–æ–ª–∏–≥–æ–Ω–∞–º–∏");
      }

      mapInstance.current.addLayer(vectorLayer);
      vectorLayerRef.current = vectorLayer;
      vectorSourceRef.current = vectorSource;

      // ‚úÖ –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
      const extent = vectorSource.getExtent();
      if (extent && extent[0] !== Infinity) {
        console.log("üîÑ –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –¥–∞–Ω–Ω—ã—Ö...");
        mapInstance.current.getView()?.fit(extent, {
          padding: [20, 20, 20, 20],
          maxZoom: 18,
          duration: 1000,
        });
      } else {
        console.warn("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É: –ø—É—Å—Ç–æ–π `extent`.");
      }

      // ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –æ–±—ä–µ–∫—Ç—É
      mapInstance.current.on("click", (event) => {
        let clickedFeature: Feature<Geometry> | null = null;

        mapInstance.current?.forEachFeatureAtPixel(
          event.pixel,
          (featureLike) => {
            if (featureLike instanceof Feature) {
              clickedFeature = featureLike as Feature<Geometry>;
              return true;
            }
          },
          { hitTolerance: 10 }
        );

        if (clickedFeature) {
          console.log("‚úÖ –í—ã–±—Ä–∞–Ω –æ–±—ä–µ–∫—Ç:", clickedFeature);
          setSelectedFeature(clickedFeature);
        } else {
          console.log("üóë –û–±—ä–µ–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω");
          setSelectedFeature(null);
        }
      });
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ GeoJSON:", error);
    }
  }, [geojsonData, isMapReady, selectedFeature]);

  return (
    <div
      ref={mapRef}
      className="w-full h-96 border border-gray-600 rounded-lg bg-gray-200"
      style={{ minHeight: "500px", width: "100%" }}
    />
  );
};